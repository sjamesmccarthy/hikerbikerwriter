import { NextResponse } from "next/server";
import pool from "@/lib/db";
import { RowDataPacket } from "mysql2";
import networksData from "@/data/people-networks.json";

interface RequestBody {
  userId: string;
  userEmail: string;
  relationship: string;
  network: string;
}

interface FamilyMember {
  name: string;
  gender: string;
  relation: string;
  person_id: string;
  familylineid: string;
  network_level: number;
  email: string;
}

interface FamilyData {
  people: FamilyMember[];
  [key: string]: unknown;
}

interface User extends RowDataPacket {
  name: string;
  email: string;
  person_id: string;
}

interface FamilyLine extends RowDataPacket {
  id: string;
  json: string;
}

async function validateRequest(requestBody: RequestBody): Promise<string[]> {
  const requiredFields: (keyof RequestBody)[] = [
    "userId",
    "userEmail",
    "relationship",
    "network",
  ];
  return requiredFields.filter((field) => !requestBody[field]);
}

async function getFamilyLine(userEmail: string): Promise<FamilyLine | null> {
  const [rows] = await pool.execute<FamilyLine[]>(
    "SELECT f.* FROM familyline f JOIN users u ON f.person_id = u.person_id WHERE u.email = ?",
    [userEmail]
  );
  return rows.length ? rows[0] : null;
}

async function getUser(userId: string): Promise<User | null> {
  const [rows] = await pool.execute<User[]>(
    "SELECT * FROM users WHERE person_id = ?",
    [userId]
  );
  return rows.length ? rows[0] : null;
}

function parseFamilyData(jsonData: string | object): FamilyData {
  try {
    const parsedJson =
      typeof jsonData === "string" ? JSON.parse(jsonData) : jsonData;
    const familyData =
      typeof parsedJson === "string" ? JSON.parse(parsedJson) : parsedJson;
    return { people: familyData?.people || [] };
  } catch (error) {
    console.error("Error parsing family data:", error);
    return { people: [] };
  }
}

function createFamilyMember(
  user: User & { person_id: string },
  relationship: string,
  familylineId: string,
  networkType: string
): FamilyMember {
  return {
    name: user.name || "",
    gender: "",
    relation: relationship,
    person_id: user.person_id,
    familylineid: familylineId,
    network_level:
      networksData.network.find((n) => n.type === networkType)?.level || 1,
    email: user.email || "",
  };
}

async function updateFamilyLine(familyline: FamilyLine, familyData: FamilyData): Promise<void> {
  await pool.execute("UPDATE familyline SET json = ? WHERE id = ?", [
    JSON.stringify(familyData),
    familyline.id,
  ]);
}

async function processFamilyUpdate(
  userToAdd: User,
  requestBody: RequestBody,
  familyline: FamilyLine
): Promise<FamilyData> {
  // Parse logged-in user's family data
  const familyData = parseFamilyData(familyline.json);

  // Check if user is already in the family
  if (familyData.people.some((p: FamilyMember) => p.email === userToAdd.email)) {
    throw new Error("User is already in the family");
  }

  // Create and add new family member
  const newPerson = createFamilyMember(
    userToAdd,
    requestBody.relationship,
    familyline.id,
    requestBody.network
  );
  familyData.people.push(newPerson);

  return familyData;
}

export async function POST(request: Request) {
  try {
    console.log("Received add-family-member request");
    const requestBody = (await request.json()) as RequestBody;
    console.log("Request body:", requestBody);

    // Validate request
    const missingFields = await validateRequest(requestBody);
    if (missingFields.length > 0) {
      console.error("Missing required fields:", missingFields);
      return NextResponse.json(
        { error: `Missing required fields: ${missingFields.join(", ")}` },
        { status: 400 }
      );
    }

      // Get user to add
    const userToAdd = await getUser(requestBody.userId);
    if (!userToAdd?.person_id) {
      return NextResponse.json(
        { error: "User to add not found or missing person_id" },
        { status: 404 }
      );
    }

    // Get logged-in user's familyline
    const familyline = await getFamilyLine(requestBody.userEmail);
    if (!familyline) {
      return NextResponse.json(
        { error: "No familyline found for logged in user" },
        { status: 404 }
      );
    }

    try {
      // Update logged-in user's family data
      const familyData = await processFamilyUpdate(userToAdd, requestBody, familyline);

      // Get and update the added person's familyline
      const addedPersonFamilyline = await getFamilyLine(userToAdd.email);
      if (addedPersonFamilyline) {
        const addedPersonFamilyData = parseFamilyData(addedPersonFamilyline.json);
        const loggedInUser = await getUser(familyline.person_id);

        if (loggedInUser && !addedPersonFamilyData.people.some(
          (p: FamilyMember) => p.email === requestBody.userEmail
        )) {
          const addLoggedInUser = createFamilyMember(
            loggedInUser,
            requestBody.relationship, // You might want to map this to an opposite relationship
            addedPersonFamilyline.id,
            requestBody.network
          );
          addedPersonFamilyData.people.push(addLoggedInUser);

          // Update both familylines
          await Promise.all([
            updateFamilyLine(familyline, familyData),
            updateFamilyLine(addedPersonFamilyline, addedPersonFamilyData)
          ]);
        }
      }

      return NextResponse.json({
        success: true,
        message: "Family member added successfully",
        familyData,
      });
    } catch (error) {
      if (error instanceof Error && error.message === "User is already in the family") {
        return NextResponse.json(
          { error: error.message },
          { status: 400 }
        );
      }
      throw error;
    }
  } catch (error) {
    console.error("Error adding family member:", error);
    return NextResponse.json(
      { error: "Failed to add family member" },
      { status: 500 }
    );
  }
}



    // Get the familyline of the person being added
    const addedPersonFamilyline = await getFamilyLine(userToAdd.email);
    let addedPersonFamilyData: FamilyData;

    if (addedPersonFamilyline) {
      // Parse their family data
      try {
        const parsedJson =
          typeof addedPersonFamilyline.json === "string"
            ? JSON.parse(addedPersonFamilyline.json)
            : addedPersonFamilyline.json;

        addedPersonFamilyData =
          typeof parsedJson === "string" ? JSON.parse(parsedJson) : parsedJson;

        if (!addedPersonFamilyData?.people) {
          addedPersonFamilyData = { people: [] };
        }
      } catch (error) {
        console.error("Error parsing added person's family data:", error);
        addedPersonFamilyData = { people: [] };
      }

      // Add the logged-in user to their family data
      const reverseRelationship = requestBody.relationship; // You might want to map this to the opposite relationship
      const loggedInUser = await getUser((await getFamilyLine(requestBody.userEmail))?.person_id || "");
      
      if (loggedInUser) {
        const addLoggedInUser: FamilyMember = {
          name: loggedInUser.name || "",
          gender: "",
          relation: reverseRelationship,
          person_id: (await getFamilyLine(requestBody.userEmail))?.person_id || "",
          familylineid: addedPersonFamilyline.id,
          network_level:
            networksData.network.find((n) => n.type === requestBody.network)
              ?.level || 1,
          email: requestBody.userEmail,
        };

        // Check if logged-in user is already in their family
        if (!addedPersonFamilyData.people.some((p: FamilyMember) => p.email === requestBody.userEmail)) {
          addedPersonFamilyData.people.push(addLoggedInUser);
        }
      }
    }

    // Update both family data records in the database
    try {
      await pool.execute("UPDATE familyline SET json = ? WHERE id = ?", [
        JSON.stringify(familyData),
        familyline.id,
      ]);
      console.log("Successfully updated logged-in user's familyline data");

      if (addedPersonFamilyline) {
        await pool.execute("UPDATE familyline SET json = ? WHERE id = ?", [
          JSON.stringify(addedPersonFamilyData),
          addedPersonFamilyline.id,
        ]);
        console.log("Successfully updated added person's familyline data");
      }
    } catch (error) {
      console.error("Error updating familyline:", error);
      return NextResponse.json(
        { error: "Failed to update family data" },
        { status: 500 }
      );
    }

    return NextResponse.json({
      success: true,
      message: "Family member added successfully",
      familyData,
    });
  } catch (error) {
    console.error("Error adding family member:", error);
    return NextResponse.json(
      { error: "Failed to add family member" },
      { status: 500 }
    );
  }
}
